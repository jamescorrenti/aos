Dear Colleague,

As you may already know, I am overseeing the development of a new
parallel programming library for distributed machines called gtmpi.
I asked one of my developers to implement several barrier
synchronization and run some experiments to help us decide which to
adopt.  The results were a little surprising to me, and I was hoping
that I could get your to share your thoughts on them.

In summary, we compared the algorithms presented in the famous
Mellor-Crummey Scott paper by measuring how long it took for a given
number of threads to cross 10^5 barriers. All experiments were run on
a dedicated cluster with one process assigned to each node. 

Details individual nodes are attached along with the data from the experiments.

Looking forward to your insight!


Response:

It's once again really interesting to see that your results have the counter algorithm
performing the best. It seems apparent to me that when there is little network contention
when there are so few nodes operating on such a high speed network. The large jump that
it takes between 13 and 14 nodes indicates to me that you would see the counter algo performance
really take a hit as more and more nodes were added and traffic contention increased. 

The rest of the algorithm seem to perform about the same as each other, with the exceptions
of the tournament and MCS sticking out as having some of the noticeably worse performances. This makes sense since those involve the most waiting on other process to communicate there status to them. 
